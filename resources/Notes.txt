Shaders:
	Loading/Unloading/Debugging:
		glCreateProgram() -> GLuint programName;
			desc: 
				Get new program name from OpenGL
		glDeleteProgram(GLuint program);
			desc:
				Delete program with name 'program'
		glCreateShader(GLenum shaderType) -> GLuint shaderName;
			desc:
				Get new shader name of type 'shaderType'
			shader types:
				GL_COMPUTE_SHADER, GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER,
				GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, GL_FRAGMENT_SHADER
		glDeleteShader(GLuint shader);
			desc:
				Delete shader with name 'shader'
		glShaderSource(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
			desc:
				Pass shader text to shader object 'shader'. 'count' specifices the number of  shaders to be process.
				'string' is a pointer to shader text data. 'length' is length of related text data. If NULL then 
				'string' is assumed to be null terminated.
		glCompileShader(GLuint shader);
			desc: 
				Compile shader object 'shader'
		glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
			desc:
				return a paramter from shader object 'shader'
			parameter types:
				GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, 
				GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH
		glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
			desc:
				Returns info log for shader object 'shader'. 'maxLength' specifies the size of the character buffer
				for storing the info log. 'length' of the info log. 'infolog' is the buffer for storing the info log.
		glAttachShader(GLuint program, GLuint shader);
			desc:
				Attaches shader object 'shader' to program object 'program'
		glLinkProgram(GLuint program);
			desc:
				Links program object 'program'
		glGetProgramiv(GLuint program, GLenum pname, GLint* params);
			desc:
				Return a parameter from program object 'program'
			parameter types:
				GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH,
				GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
				GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH
		glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
			desc:
				Returns info log for program object 'program'. 'maxLength' specifies the size of the character buffer
				for storing the info log. 'length' of the info log. 'infolog' is the buffer for storing the info log.
	Uniforms:
		glGetUniformLocation(GLuint program, const char* name) -> GLint;
			desc: 
				Returns the index of the uniform variable 'name' from program object 'program'
		glUniform*(GLint location, TYPE value);
			desc:
				Loads uniform index 'location' with data of 'value'
		glUniform*v(GLint location, GLsizei count, const TYPE* values);
			desc:
				Loads uniform index 'location' with 'count' number of values from vector type 'values'
		glUniformMatrix*(GLint location, GLsizei count, GLboolean transpose, const GLfloat* values);
			desc:
				Loads matrix uniform index 'location' with 'count' sets of 'values'. 'transpose' is true if
				defaulting to row-form matrices.
		glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName) -> GLuint;
			desc:
				Returns index of named uniform block 'uniformBlockName'
	Buffers:
		glCreateBuffer(GLsizei n, GLuint* buffers);
			desc:
				Specify the number of buffers to create with 'n' and store in 'buffers' array
		glBindBuffer(GLenum target, GLuint buffer);
			desc:
				Binds buffer id 'buffer' and sets it to current 'target'
			targets:
				GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER,
				GL_DISPATCH_INDIRECT_BUFFER, DL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER,
				GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER,
				GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER
		glBufferStorage(GLenum target, GLsizeiptr size, const void* data, GLbitfields flags);
			desc:
				Loads 'data' of size 'size' into currently bound target buffer 'target' with flags 'flags'
			targets:
				GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER,
				GL_DISPATCH_INDIRECT_BUFFER, DL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER,
				GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER,
				GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER
		glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void* data, GLbitfields flags);
			desc:
				Same as glBufferStorage except 'data' is loaded into named buffer 'buffer'
		glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
			desc:
				Binds range of buffer object 'buffer' from range of 'offset' to 'size' to binding point
				index at 'index'
			targets:
				GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, GL_SHADER_STORAGE_BUFFER